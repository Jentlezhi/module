//
//  CYTExtendViewModel.m
//  CYTEasyPass
//
//  Created by xujunquan on 17/6/21.
//  Copyright © 2017年 EasyPass. All rights reserved.
//

#import "CYTExtendViewModel.h"
#import "CYTRequestResponseModel.h"
#import "CYTLoginParmeters.h"
#import "CYTUserKeyInfoModel.h"
#import "CYTLoginViewController.h"

@implementation CYTExtendViewModel
@synthesize request = _request;

#pragma mark- 方法重写，处理网络请求返回数据模型
- (void)responseModelHandleWithModel:(FFBasicNetworkResponseModel *)inputModel andHandle:(void (^)(FFBasicNetworkResponseModel *))handle {
    
    if (inputModel.responseObject && [inputModel.responseObject isKindOfClass:[NSDictionary class]]) {
        
        if (inputModel.httpCode>=400) {
            //处理错误码
            [self handleErrorCodeWithResponseModel:inputModel andHandle:^(FFBasicNetworkResponseModel *resultMod) {
                handle(resultMod);
            }];
        }else {
            //返回数据是字典结构
            CYTRequestResponseModel *cytResponse = [CYTRequestResponseModel mj_objectWithKeyValues:inputModel.responseObject];
            BOOL effective = cytResponse.result;
            NSString *message = cytResponse.message;
            NSDictionary *data;
            
            //判断data是不是数组，如果是手动封装成字典结构
            if (inputModel.responseObject[@"data"] && [inputModel.responseObject[@"data"] isKindOfClass:[NSArray class]]) {
                //data是数组
                data = @{@"data":inputModel.responseObject[@"data"]};
            }else if (inputModel.responseObject[@"data"] && [inputModel.responseObject[@"data"] isKindOfClass:[NSDictionary class]]){
                data = cytResponse.data;
            }else {
                data = nil;
            }
            
            //发出消息，并返回数据
            [self sendHudStateHide];
            [self returnModel:inputModel effective:effective mess:message data:data code:cytResponse.errorCode handle:handle];
        }
    }else {
        //返回数据不是字典结构或不存在
        //发出消息，并返回数据
        [self sendHudStateHide];
        [self returnModel:inputModel effective:NO mess:CYTNetworkError data:nil code:-1 handle:handle];
    }
}

#pragma mark- 网络请求错误码处理
- (void)handleErrorCodeWithResponseModel:(FFBasicNetworkResponseModel *)responseModel andHandle:(void (^)(FFBasicNetworkResponseModel *))handle{
    CYTRequestResponseModel *cytResponse = [CYTRequestResponseModel mj_objectWithKeyValues:responseModel.responseObject];
    
    //错误码处理
    if (cytResponse.errorCode == 401) {
        //token过期,重新请求token，如果成功则，再次请求接口
        //如果失败则重新登录，登录后进入首页！！
        FFBasicNetworkRequestModel *reqMod = [FFBasicNetworkRequestModel new];
        reqMod.needHud = NO;
        reqMod.requestURL = kURL.user_identity_auth;
        reqMod.requestParameters = [CYTTools loginParameters].mj_keyValues;
        reqMod.httpHeadFiledDictionary = [CYTTools headFiledDictionary];
        
        @weakify(self);
        [self.request postWithModel:reqMod result:^(FFBasicNetworkResponseModel *responseObj) {
            @strongify(self);

            CYTRequestResponseModel *cytResponse = [CYTRequestResponseModel mj_objectWithKeyValues:responseObj.responseObject];
            FFBasicNetworkResponseModel * responseObject = responseObj;
            responseObject.resultEffective = cytResponse.result;
            responseObject.resultMessage = cytResponse.message;
            responseObject.dataDictionary = cytResponse.data;
            responseObject.httpCode = cytResponse.errorCode;;
            
            if (responseObject.httpCode<400) {
                //处理新的token数据,
                CYTUserKeyInfoModel *keyInfo = [CYTUserKeyInfoModel mj_objectWithKeyValues:responseObject.dataDictionary];
                if (!keyInfo) {
                    return ;
                }
                CYTAccountManager *account = [CYTAccountManager sharedAccountManager];
                account.accessToken = keyInfo.accessToken;
                account.refreshToken = keyInfo.refreshToken;
                [[NSNotificationCenter defaultCenter] postNotificationName:kTokenRefreshedKey object:nil];
                
                //重新请求上次失败的接口
                [self requestAgainWithResponseModel:responseModel andHandle:handle];
                
            }else if(responseObject.httpCode == 401){
                //弹出登录页面,不返回数据
                [self presentLoginWithResponseModel:responseObject];
            }else {
                //其他错误
                //发出消息，并返回数据
                [self sendHudStateHide];
                [self returnModel:responseObject effective:NO mess:responseObject.resultMessage data:nil code:cytResponse.errorCode handle:handle];
            }
        }];
    }else {
        //其他错误
        //发出消息，并返回数据
        [self sendHudStateHide];
        [self returnModel:responseModel effective:NO mess:cytResponse.message data:nil code:cytResponse.errorCode handle:handle];
    }
}

#pragma mark- 重新请求上次失败的网络请求
- (void)requestAgainWithResponseModel:(FFBasicNetworkResponseModel *)responseModel andHandle:(void (^)(FFBasicNetworkResponseModel *))handle{
    //如果上次网络请求不是刷新token接口,再次请求原始接口
    FFBasicNetworkRequestModel *requestModel = responseModel.requestParameters;
    if ([requestModel.requestURL isEqualToString:kURL.user_identity_auth]) {
        //弹出登录页面,不返回数据
        [self presentLoginWithResponseModel:responseModel];
        
    }else {
        requestModel.httpHeadFiledDictionary = [CYTTools headFiledDictionary];
        
        if (requestModel.methodType == NetRequestMethodTypeGet) {
            [self.request getWithModel:requestModel result:^(FFBasicNetworkResponseModel *responseObject) {
                [self handleResultWithResponse:responseObject andHandle:^(FFBasicNetworkResponseModel *mod) {
                    handle(mod);
                }];
            }];
        }else {
            [self.request postWithModel:requestModel result:^(FFBasicNetworkResponseModel *responseObject) {
                [self handleResultWithResponse:responseObject andHandle:^(FFBasicNetworkResponseModel *mod) {
                    handle(mod);
                }];
            }];
        }
    }
}

#pragma mark- 返回model、发送hud消息、弹出登录
- (void)returnModel:(FFBasicNetworkResponseModel *)model effective:(BOOL)effective mess:(NSString *)mess data:(NSDictionary *)data code:(NSInteger)code handle:(void (^)(FFBasicNetworkResponseModel *))handle{
    if (!model) {
        model = [FFBasicNetworkResponseModel new];
    }
    model.resultEffective = effective;
    model.resultMessage = mess;
    model.dataDictionary = data;
    model.httpCode = code;
    
    if (handle) {
        handle(model);
    }
}

//发送hud状态
- (void)sendHudStateHide {
    [self.hudSubject sendNext:@"1"];
}

- (void)presentLoginWithResponseModel:(FFBasicNetworkResponseModel *)responseModel {
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self sendHudStateHide];
        //重新登录逻辑
        [CYTTools existLoginStateWithMessage:responseModel.resultMessage];
    });
}

#pragma mark-
- (FFBasicNetworkRequestModel *)requestModelHandle:(FFBasicNetworkRequestModel *)model {
    if (model) {
        model.httpHeadFiledDictionary = [CYTTools headFiledDictionary];
    }
    return model;
}

- (FFBasicNetworkManager *)request {
    if (!_request) {
        _request = [FFBasicNetworkManager new];
    }
    return _request;
}

@end
